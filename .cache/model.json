{
    "expiry": 1758794850.3517394,
    "data": {
        "6736411cf127849667606689": {
            "id": "6736411cf127849667606689",
            "name": "Tavily Search API",
            "description": "Tavily Search API is a search engine optimized for LLMs, aimed at efficient, quick and persistent search results. Unlike other search APIs such as Serp or Google, Tavily focuses on optimizing search for AI developers and autonomous AI agents. We take care of all the burden of searching, scraping, filtering and extracting the most relevant information from online sources. All in a single API call!",
            "supplier": {
                "id": 19379,
                "name": "Tavily",
                "code": "tavily"
            },
            "additional_info": {
                "parameters": {
                    "numResults": [
                        "10"
                    ]
                }
            },
            "input_params": {
                "query": {
                    "name": "query",
                    "required": true,
                    "isFixed": false,
                    "values": [],
                    "defaultValues": [],
                    "availableOptions": [],
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "numResults": {
                    "name": "numResults",
                    "required": false,
                    "isFixed": false,
                    "values": [],
                    "defaultValues": [
                        {
                            "value": "10",
                            "label": "Number of Results"
                        }
                    ],
                    "availableOptions": [],
                    "dataType": "number",
                    "dataSubType": "number",
                    "multipleValues": false
                },
                "include_domains": {
                    "name": "include_domains",
                    "required": false,
                    "isFixed": false,
                    "values": [],
                    "defaultValues": [],
                    "availableOptions": [],
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "exclude_domains": {
                    "name": "exclude_domains",
                    "required": false,
                    "isFixed": false,
                    "values": [],
                    "defaultValues": [],
                    "availableOptions": [],
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                }
            },
            "output_params": {
                "outputs": {
                    "name": "Outputs",
                    "code": "outputs",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "query": {
                    "required": true,
                    "value": null
                },
                "numResults": {
                    "required": false,
                    "value": null
                },
                "include_domains": {
                    "required": false,
                    "value": null
                },
                "exclude_domains": {
                    "required": false,
                    "value": null
                }
            },
            "function": "utilities",
            "status": "onboarded"
        },
        "66f423426eb563fa213a3531": {
            "id": "66f423426eb563fa213a3531",
            "name": "Scrape Website Tool",
            "description": "A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content. This tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites.",
            "supplier": {
                "id": 16094,
                "name": "CrewAI",
                "code": "crewai"
            },
            "additional_info": {},
            "input_params": {
                "text": {
                    "name": "text",
                    "required": true,
                    "isFixed": false,
                    "values": [],
                    "defaultValues": [],
                    "availableOptions": [],
                    "dataType": "text",
                    "dataSubType": "url",
                    "multipleValues": true
                }
            },
            "output_params": {
                "outputs": {
                    "name": "Outputs",
                    "code": "outputs",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "text": {
                    "required": true,
                    "value": null
                }
            },
            "function": "utilities",
            "status": "onboarded"
        },
        "684ae26dcee3bec0fdfe26d6": {
            "id": "684ae26dcee3bec0fdfe26d6",
            "name": "postgres_query",
            "description": "\n        Executes a SQL query against the 'customers' table.\n\n    ",
            "supplier": {
                "id": 1,
                "name": "aiXplain",
                "code": "aixplain"
            },
            "additional_info": {},
            "input_params": {
                "sql": {
                    "name": "sql",
                    "required": true,
                    "isFixed": false,
                    "values": [],
                    "defaultValues": [],
                    "availableOptions": [],
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                }
            },
            "output_params": {
                "outputs": {
                    "name": "Outputs",
                    "code": "outputs",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "sql": {
                    "required": true,
                    "value": null
                }
            },
            "function": "utilities",
            "status": "onboarded"
        },
        "669a63646eb56306647e1091": {
            "id": "669a63646eb56306647e1091",
            "name": "GPT-4o Mini",
            "description": "Creates coherent and contextually relevant textual content based on prompts or certain parameters. Useful for chatbots, content creation, and data augmentation.",
            "supplier": {
                "id": 1777,
                "name": "OpenAI",
                "code": "openai"
            },
            "additional_info": {
                "code": "",
                "parameters": {
                    "language": [
                        "en"
                    ],
                    "temperature": [
                        "0"
                    ],
                    "max_tokens": [
                        "200"
                    ],
                    "history": [
                        ""
                    ]
                }
            },
            "input_params": {
                "text": {
                    "name": "Text",
                    "code": "text",
                    "required": true,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "temperature": {
                    "name": "Temperature",
                    "code": "temperature",
                    "required": false,
                    "isFixed": false,
                    "dataType": "number",
                    "dataSubType": "number",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "prompt": {
                    "name": "Prompt",
                    "code": "prompt",
                    "required": false,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "context": {
                    "name": "Context",
                    "code": "context",
                    "required": false,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "language": {
                    "name": "Language",
                    "code": "language",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "script": {
                    "name": "Script",
                    "code": "script",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                }
            },
            "output_params": {
                "data": {
                    "name": "Text",
                    "code": "data",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "text": {
                    "required": true,
                    "value": null
                },
                "template": {
                    "required": false,
                    "value": null
                },
                "prompt": {
                    "required": false,
                    "value": null
                },
                "context": {
                    "required": false,
                    "value": null
                },
                "language": {
                    "required": true,
                    "value": null
                },
                "script": {
                    "required": false,
                    "value": null
                },
                "temperature": {
                    "required": false,
                    "value": null
                },
                "max_tokens": {
                    "required": false,
                    "value": null
                },
                "history": {
                    "required": false,
                    "value": null
                }
            },
            "function": "text-generation",
            "status": "onboarded"
        },
        "68c3d266846e880471f96476": {
            "id": "68c3d266846e880471f96476",
            "name": "Policy KB",
            "description": "Tiny RAG index for regulations",
            "supplier": {
                "id": 1,
                "name": "aiXplain",
                "code": "aixplain"
            },
            "version": "airv2-prod-61752-policykb",
            "license": null,
            "privacy": {
                "_value_": "Private",
                "_name_": "PRIVATE",
                "__objclass__": "{'_generate_next_value_': <function Enum._generate_next_value_ at 0x000001907C244040>, '__module__': 'aixplain.enums.privacy', '__doc__': 'Enumeration of possible privacy levels.\\n\\n    This enum defines the different levels of privacy that can be associated with\\n    an asset or resource, including public, private, and restricted privacy levels.\\n\\n    Attributes:\\n        PUBLIC (str): Public privacy level.\\n        PRIVATE (str): Private privacy level.\\n        RESTRICTED (str): Restricted privacy level.\\n    ', '_new_member_': <built-in method __new__ of type object at 0x00007FFB38820E30>, '_use_args_': False, '_member_names_': ['PUBLIC', 'PRIVATE', 'RESTRICTED'], '_member_map_': {'PUBLIC': <Privacy.PUBLIC: 'Public'>, 'PRIVATE': <Privacy.PRIVATE: 'Private'>, 'RESTRICTED': <Privacy.RESTRICTED: 'Restricted'>}, '_value2member_map_': {'Public': <Privacy.PUBLIC: 'Public'>, 'Private': <Privacy.PRIVATE: 'Private'>, 'Restricted': <Privacy.RESTRICTED: 'Restricted'>}, '_unhashable_values_': [], '_member_type_': <class 'object'>, '_value_repr_': None, 'PUBLIC': <Privacy.PUBLIC: 'Public'>, 'PRIVATE': <Privacy.PRIVATE: 'Private'>, 'RESTRICTED': <Privacy.RESTRICTED: 'Restricted'>, '__new__': <function Enum.__new__ at 0x000001907C213EC0>}",
                "_sort_order_": 1
            },
            "cost": {
                "price": 1e-06,
                "unitType": "CHAR",
                "unitTypeScale": null
            },
            "api_key": "8b45372296595c2f1b5f34adba0dea0babf3b9bf1c0dcd8d57abc16d6a073196",
            "additional_info": {
                "code": "",
                "parameters": {
                    "action": [
                        "search"
                    ]
                },
                "inputs": [],
                "temperature": null,
                "attributes": [
                    {
                        "name": "embeddingmodel",
                        "code": "6734c55df127847059324d9e"
                    }
                ]
            },
            "url": "https://models.aixplain.com/api/v1/execute",
            "backend_url": "https://platform-api.aixplain.com",
            "function": "search",
            "is_subscribed": false,
            "created_at": "2025-09-12 07:57:26.208000+00:00",
            "input_params": {
                "text": {
                    "name": "Text",
                    "code": "text",
                    "required": true,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false,
                    "defaultValues": []
                }
            },
            "output_params": {
                "data": {
                    "name": "Text",
                    "code": "data",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "action": {
                    "required": false,
                    "value": null
                },
                "data": {
                    "required": true,
                    "value": null
                },
                "dataType": {
                    "required": true,
                    "value": null
                },
                "payload": {
                    "required": false,
                    "value": null
                },
                "attributes": {
                    "required": false,
                    "value": null
                },
                "additional_params": {
                    "required": false,
                    "value": null
                },
                "filters": {
                    "required": false,
                    "value": null
                },
                "document_id": {
                    "required": false,
                    "value": null
                }
            },
            "supports_streaming": null,
            "function_type": {
                "_value_": "search",
                "_name_": "SEARCH",
                "__objclass__": "{'_generate_next_value_': <function Enum._generate_next_value_ at 0x000001907C244040>, '__module__': 'aixplain.enums.function_type', '__doc__': 'Enumeration of function types in the aiXplain system.\\n\\n    This enum defines the different types of functions and services available\\n    in the system, including AI models, data processing utilities, and\\n    integration components.\\n\\n    Attributes:\\n        AI (str): Artificial Intelligence function type.\\n        SEGMENTOR (str): Data segmentation function type.\\n        RECONSTRUCTOR (str): Data reconstruction function type.\\n        UTILITY (str): Utility function type.\\n        METRIC (str): Metric/evaluation function type.\\n        SEARCH (str): Search function type.\\n        INTEGRATION (str): Integration connector function type. # i.e. slack\\n        CONNECTION (str): Connection function type. # slack - action\\n        MCP_CONNECTION (str): MCP connection function type.\\n        MCPSERVER (str): MCP server is for on-prem solution. It should be treated like a model. # ONPREM_MCP_MODEL\\n    ', '_new_member_': <built-in method __new__ of type object at 0x00007FFB38820E30>, '_use_args_': False, '_member_names_': ['AI', 'SEGMENTOR', 'RECONSTRUCTOR', 'UTILITY', 'METRIC', 'SEARCH', 'INTEGRATION', 'CONNECTION', 'MCP_CONNECTION', 'MCPSERVER'], '_member_map_': {'AI': <FunctionType.AI: 'ai'>, 'SEGMENTOR': <FunctionType.SEGMENTOR: 'segmentor'>, 'RECONSTRUCTOR': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'UTILITY': <FunctionType.UTILITY: 'utility'>, 'METRIC': <FunctionType.METRIC: 'metric'>, 'SEARCH': <FunctionType.SEARCH: 'search'>, 'INTEGRATION': <FunctionType.INTEGRATION: 'connector'>, 'CONNECTION': <FunctionType.CONNECTION: 'connection'>, 'MCP_CONNECTION': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'MCPSERVER': <FunctionType.MCPSERVER: 'mcpserver'>}, '_value2member_map_': {'ai': <FunctionType.AI: 'ai'>, 'segmentor': <FunctionType.SEGMENTOR: 'segmentor'>, 'reconstructor': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'utility': <FunctionType.UTILITY: 'utility'>, 'metric': <FunctionType.METRIC: 'metric'>, 'search': <FunctionType.SEARCH: 'search'>, 'connector': <FunctionType.INTEGRATION: 'connector'>, 'connection': <FunctionType.CONNECTION: 'connection'>, 'mcpconnection': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'mcpserver': <FunctionType.MCPSERVER: 'mcpserver'>}, '_unhashable_values_': [], '_member_type_': <class 'object'>, '_value_repr_': None, 'AI': <FunctionType.AI: 'ai'>, 'SEGMENTOR': <FunctionType.SEGMENTOR: 'segmentor'>, 'RECONSTRUCTOR': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'UTILITY': <FunctionType.UTILITY: 'utility'>, 'METRIC': <FunctionType.METRIC: 'metric'>, 'SEARCH': <FunctionType.SEARCH: 'search'>, 'INTEGRATION': <FunctionType.INTEGRATION: 'connector'>, 'CONNECTION': <FunctionType.CONNECTION: 'connection'>, 'MCP_CONNECTION': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'MCPSERVER': <FunctionType.MCPSERVER: 'mcpserver'>, '__new__': <function Enum.__new__ at 0x000001907C213EC0>}",
                "_sort_order_": 5
            },
            "status": "onboarded",
            "embedding_model": "6734c55df127847059324d9e",
            "embedding_size": 1536
        }
    }
}